;; zad 1
(define (len l)
  (if (null? l) 0
      (+ 1 (len (cdr l)))))

;(len `(3 328 0 828 2))

;; zad 2
(define (minimum l)
  (cond
    ((equal? (cdr l) `()) (car l))
    ((< (car l) (minimum (cdr l))) (car  l))
    (else (minimum (cdr l)))))

;(minimum `(1 -3 -2))

;; zad 3
(define (any? p? l)
  (cond
    ((null? l) #f)
    ((p? (car l)) #t)
    (else (any? p? (cdr l)))))

;(any? (lambda (x) (= (remainder x 7) 0)) `(212 3 14 35))

;; zad 3.1
(define (all? p? l)
  (cond
    ((null? l) #t)
    ((p? (car l)) (all? p? (cdr l)))
    (else #f)))

(define (all? p? l)
  (not (any? (lambda(x) (not (p? x))) l)))

;(any? odd? `(1 2 3))
;(all? odd? `(0 -1 3))

;; zad 4
(define (member? x l)
  (if (null? l) #f
      (if (equal? (car l) x) #t
          (member? x (cdr l)))))

;(member? `(1) `(1 2 (1) 3 \a))

;;zad 5
(define (at n l)
  (if (or (< n 0) (> n (- (len l) 1))) #f
      (if (= n 0) (car l) (at (- n 1) (cdr l)))))

;(at 6 `(1 2 3 "car" #f \f (l i s t)))

;; zad 6
(define (push-back x l)
  (if (null? l) (list x) (cons (car l) (push-back x (cdr l)))))


;(define l (list 1 2 3 4 5))
;l
;(push-back 6 l)

;; zad 7
(define (_reverse l)
  (if (null? l) `()
      (append (_reverse (cdr l)) (list (car l)))))

;(_reverse (list 1 2 3 4 5))

;; zad 8
(define (insert x n l)
  (if (> n (- (len l) 1)) (append l (list x))
      (if (= n 0) (append (list x) l)
          (if (= n 1) (append (list (car l)) (list x) (cdr l))
              (append (list (car l)) (insert x (- n 1) (cdr l)))))))

;(insert 0 0 (list 1 2 3 4 5))

;; zad 9
(define (range a b)
  (define l `())
  (define (range a b l)
    (if (> a b) l
        (if (= a b) (list a)
            (append l (list a) (range (+ a 1) b l)))))
  (range a b l)
  )

;(range 1 10)


      


  













